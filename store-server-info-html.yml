---
- name: Gather information from RHEL8 server and create web pages
  hosts: prccnonprodservers
  remote_user: afernandez
  become_method: sudo
  become: yes
  vars:
    dest_base_path: "/shared/html-report"
    src_path: "/tmp/server_info"

  tasks:
    - name: Ensure output directory exists on remote
      file:
        path: /tmp/server_info
        state: directory
        mode: '0755'

    - name: Gather hostname and IP address
      shell: |
        echo "<h2>Hostname: $(hostname)</h2>" > /tmp/server_info/system_info.html
        echo "<p>IP Address: $(hostname -I)</p>" >> /tmp/server_info/system_info.html

    - name: Check uptime
      shell: |
        echo "<h3>Uptime:</h3><p>" >> /tmp/server_info/system_info.html
        uptime >> /tmp/server_info/system_info.html
        echo "</p>" >> /tmp/server_info/system_info.html

    - name: Check number of processors
      shell: |
        echo "<h3>Processors:</h3><p>" >> /tmp/server_info/system_info.html
        nproc >> /tmp/server_info/system_info.html
        echo "</p>" >> /tmp/server_info/system_info.html

    - name: Check memory
      shell: |
        echo "<h3>Memory:</h3><p>" >> /tmp/server_info/system_info.html
        free -h >> /tmp/server_info/system_info.html
        echo "</p>" >> /tmp/server_info/system_info.html

    - name: Check local filesystems
      shell: |
        echo "<h3>Local Filesystems:</h3><pre>" >> /tmp/server_info/system_info.html
        df -h --exclude-type=tmpfs --exclude-type=devtmpfs --exclude-type=nfs --exclude-type=cifs >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Check NFS and CIFS mounts
      shell: |
        echo "<h3>NFS and CIFS mounts:</h3><pre>" >> /tmp/server_info/system_info.html
        df -hT | grep -E 'nfs|cifs' >> /tmp/server_info/system_info.html || echo "No NFS or CIFS mounts found" >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Check firewall status and save rules if active
      shell: |
        echo "<h3>Firewall status:</h3><pre>" >> /tmp/server_info/system_info.html
        firewall-cmd --state >> /tmp/server_info/system_info.html && firewall-cmd --list-all >> /tmp/server_info/system_info.html || echo "Firewall is not running" >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Check iptables status and save rules if active
      shell: |
        echo "<h3>Iptables status:</h3><pre>" >> /tmp/server_info/system_info.html
        systemctl is-active iptables >> /tmp/server_info/system_info.html && iptables-save >> /tmp/server_info/system_info.html || echo "Iptables is not running" >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Display fstab content
      shell: |
        echo "<h3>fstab content:</h3><pre>" >> /tmp/server_info/system_info.html
        cat /etc/fstab >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Display passwd content
      shell: |
        echo "<h3>passwd content:</h3><pre>" >> /tmp/server_info/system_info.html
        cat /etc/passwd >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: List crontab jobs
      shell: |
        echo "<h3>Crontab jobs:</h3><pre>" >> /tmp/server_info/system_info.html
        crontab -l >> /tmp/server_info/system_info.html || echo "No crontab for root" >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Check active services
      shell: |
        echo "<h3>Active services:</h3><pre>" >> /tmp/server_info/system_info.html
        systemctl list-units --type=service --state=active >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Top 7 memory consuming processes
      shell: |
        echo "<h3>Top 7 memory consuming processes:</h3><pre>" >> /tmp/server_info/system_info.html
        ps aux --sort=-%mem | head -n 8 >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Top 7 CPU consuming processes
      shell: |
        echo "<h3>Top 7 CPU consuming processes:</h3><pre>" >> /tmp/server_info/system_info.html
        ps aux --sort=-%cpu | head -n 8 >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Last 7 users that logged in
      shell: |
        echo "<h3>Last 7 users that logged in:</h3><pre>" >> /tmp/server_info/system_info.html
        last -n 7 >> /tmp/server_info/system_info.html
        echo "</pre>" >> /tmp/server_info/system_info.html

    - name: Check when the system was last patched
      shell: |
        echo "<h3>Last system patch:</h3><p>" >> /tmp/server_info/system_info.html
        rpm -qa --last | head -n 1 >> /tmp/server_info/system_info.html
        echo "</p>" >> /tmp/server_info/system_info.html

    - name: Create file with last updated packages
      shell: |
        echo "<h3>Last updated packages:</h3><pre>" > /tmp/server_info/last_updated_packages.html
        rpm -qa --last >> /tmp/server_info/last_updated_packages.html
        echo "</pre>" >> /tmp/server_info/last_updated_packages.html

    - name: Merge all output into a single HTML file
      shell: |
        cat /tmp/server_info/system_info.html > /tmp/server_info/complete_info.html
        cat /tmp/server_info/last_updated_packages.html >> /tmp/server_info/complete_info.html

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/server_info/system_info.html
        - /tmp/server_info/last_updated_packages.html

    - name: Set current date
      set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y-%m-%d') }}"

    - name: Create directory with the current date
      file:
        path: "{{ dest_base_path }}/{{ current_date }}"
        state: directory
        mode: '0775'
      become: yes
      become_user: root

    - name: Copy HTML files to the directory with the current date
      copy:
        src: "{{ src_path }}/"
        dest: "{{ dest_base_path }}/{{ current_date }}/"
        mode: '0775'
        remote_src: yes
      become: yes
      become_user: root
